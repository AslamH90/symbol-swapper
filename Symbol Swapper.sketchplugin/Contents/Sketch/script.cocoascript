@import 'MochaJSDelegate.js';

var strPluginName = "Symbol Swapper";

var librarySymbols,
	symbolArray;

var swapSelected = function(context) {
	var predicate = NSPredicate.predicateWithFormat("className == 'MSSymbolMaster' || className == 'MSSymbolInstance'"),
		selection = context.selection.filteredArrayUsingPredicate(predicate);

	if (selection.length) {
		var librarySettings = getLibrary(context);

		if (librarySettings) {
			var selectedLibrary = librarySettings.selectedLibrary,
				selectedMaster = librarySettings.selectedMaster,
				selectionLoop = selection.objectEnumerator(),
				selection,
				instanceMap = {},
				count = 0;

			while (selection = selectionLoop.nextObject()) {
				var proceed = false;

				if (selectedMaster) {
					if (selectedLibrary != 0) {
						var foreignSymbol = AppController.sharedInstance().librariesController().importForeignSymbol_fromLibrary_intoDocument_(selectedMaster,selectedLibrary,context.document.documentData());

						symbolMaster = foreignSymbol.symbolMaster();
					} else {
						symbolMaster = selectedMaster;
					}

					instanceMap[selection.symbolID().toString()] = symbolMaster.symbolID().toString();

					proceed = true;
				} else {
					var symbolName = (selection instanceof MSSymbolMaster) ? selection.name().trim() : selection.symbolMaster().name().trim(),
						symbolIndex = symbolArray.indexOf(symbolName);

					if (symbolIndex >= 0) {
						if (selectedLibrary != 0) {
							var foreignSymbol = AppController.sharedInstance().librariesController().importForeignSymbol_fromLibrary_intoDocument_(librarySymbols[symbolIndex],selectedLibrary,context.document.documentData());

							symbolMaster = foreignSymbol.symbolMaster();
						} else {
							symbolMaster = librarySymbols[symbolIndex];
						}

						instanceMap[selection.symbolID().toString()] = symbolMaster.symbolID().toString();

						proceed = true;
					}
				}

				if (proceed) {
					if (selection instanceof MSSymbolMaster) {
						var instances = selection.allInstances();

						for (var i = 0; i < instances.length; i++) {
							instances[i].changeInstanceToSymbol(symbolMaster);

							count++;
						}

						if (librarySettings.deleteMasters == 1) {
							selection.removeFromParent();
						}
					} else {
						selection.changeInstanceToSymbol(symbolMaster);

						count++;
					}

					if (librarySettings.includeSiblings == 1) {
						var allInstances = getAllInstances(context);

						for (var i = 0; i < allInstances.length; i++) {
							MSLayerPaster.updateOverridesOnInstance_withIDMap_(allInstances[i],instanceMap);
						}
					}
				}
			}

			context.document.reloadInspector();

			var libraryName = (selectedLibrary == 0) ? "current document" : selectedLibrary.name() + " library";

			if (count > 0) {
				context.document.showMessage(count + " symbol instance(s) have been swapped to the " + libraryName);
			} else {
				context.document.showMessage("No matches were found in the " + libraryName);
			}
		}
	} else {
		displayDialog("Please select at least one symbol master or instance.",strPluginName);
	}
}

function displayDialog(message,title) {
	NSApplication.sharedApplication().displayDialog_withTitle(message,title);
}

function getLibrary(context) {
	var lastLibrary = context.command.valueForKey_onLayer("lastLibrary",context.document.documentData()),
		libraries = AppController.sharedInstance().librariesController().libraries(),
		libraryLoop = libraries.objectEnumerator(),
		library,
		libraryArray = ["Current Document"];

	while (library = libraryLoop.nextObject()) {
		libraryArray.push(library.name());
	}

	var fetchLibrary = (lastLibrary && lastLibrary != 0) ? libraries[libraryArray.indexOf(lastLibrary)-1] : 0;
	librarySymbols = getLibrarySymbols(context,fetchLibrary);
	symbolArray = getSymbolNames(librarySymbols);

	var selectLibrary = (lastLibrary && lastLibrary != 0) ? libraryArray.indexOf(lastLibrary) : 0;

	var alertWindow = COSAlertWindow.new();

	var pluginIconPath = context.plugin.urlForResourceNamed("icon.png").path(),
		pluginIcon = NSImage.alloc().initByReferencingFile(pluginIconPath);

	alertWindow.setIcon(pluginIcon);

	alertWindow.setMessageText(strPluginName);

	alertWindow.setInformativeText("Swap the selected symbols and/or symbol instances to another master.");

	alertWindow.addTextLabelWithValue("Select a new symbol source...");

	var symbolSource = createSelect(libraryArray,selectLibrary,NSMakeRect(0,0,300,28));
	alertWindow.addAccessoryView(symbolSource);

	var symbolSourceDelegate = new MochaJSDelegate({
		"comboBoxSelectionDidChange:" : (function() {
			var selectedLibrary = (symbolSource.indexOfSelectedItem() == 0) ? 0 : libraries[symbolSource.indexOfSelectedItem()-1];

			librarySymbols = getLibrarySymbols(context,selectedLibrary);
			symbolArray = getSymbolNames(librarySymbols);

			symbolMaster.removeAllItems();
			symbolMaster.addItemsWithObjectValues(symbolArray);
			symbolMaster.selectItemAtIndex(0);
		})
	});

	symbolSource.setDelegate(symbolSourceDelegate.getClassInstance());

	var swapType = createRadioButtons(["Swap with symbol master of same name","Let me choose..."],0);
	alertWindow.addAccessoryView(swapType);

	swapType.cells().objectAtIndex(0).setAction("callAction:");
	swapType.cells().objectAtIndex(0).setCOSJSTargetFunction(function(sender) {
		symbolMaster.setEnabled(0);
	});

	swapType.cells().objectAtIndex(1).setAction("callAction:");
	swapType.cells().objectAtIndex(1).setCOSJSTargetFunction(function(sender) {
		symbolMaster.setEnabled(1);
	});

	var symbolMaster = createSelect(symbolArray,0,NSMakeRect(0,0,300,28));
	alertWindow.addAccessoryView(symbolMaster);
	symbolMaster.setEnabled(0);

	var includeSiblings = createCheckbox({name:"Swap siblings & overrides of selected instances",value:1},1,NSMakeRect(0,0,300,14));
	alertWindow.addAccessoryView(includeSiblings);

	var deleteMasters = createCheckbox({name:"Remove selected masters after swap",value:1},1,NSMakeRect(0,0,300,14));
	alertWindow.addAccessoryView(deleteMasters);

	alertWindow.addButtonWithTitle("Swap");
	alertWindow.addButtonWithTitle("Cancel");

	var responseCode = alertWindow.runModal();

	if (responseCode == 1000) {
		var valueForLibrary = (symbolSource.indexOfSelectedItem() == 0) ? 0 : libraryArray[symbolSource.indexOfSelectedItem()];

		context.command.setValue_forKey_onLayer(valueForLibrary,"lastLibrary",context.document.documentData());

		return {
			selectedLibrary : (symbolSource.indexOfSelectedItem() != 0) ? libraries[symbolSource.indexOfSelectedItem()-1] : 0,
			selectedMaster : (swapType.selectedCell().tag() == 1) ? librarySymbols[symbolMaster.indexOfSelectedItem()] : null,
			includeSiblings : includeSiblings.state(),
			deleteMasters : deleteMasters.state()
		}
	} else return false;
}

function getLibrarySymbols(context,library) {
	if (library == 0) {
		var librarySymbols = context.document.documentData().localSymbols(),
			libraryID = context.document.documentData().objectID();
	} else {
		var libraryPath = library.locationOnDisk().path(),
			libraryFile = openFile(libraryPath),
			librarySymbols = (libraryFile) ? libraryFile.documentData().allSymbols() : nil;
			libraryID = libraryFile.documentData().objectID();

			libraryFile.close();
	}

	if (librarySymbols && librarySymbols.length) {
		return librarySymbols;
	} else {
		displayDialog("There are no symbols in the selected library.",strPluginName);
		return false;
	}
}

function openFile(path) {
	var file = MSDocument.new();

	return (file.readFromURL_ofType_error(path,'com.bohemiancoding.sketch.drawing',nil)) ? file : nil;
}

function getSymbolNames(symbols,symbolNames) {
	var symbolNames = (symbolNames) ? symbolNames : [];

	for (var i = 0; i < symbols.length; i++) {
		symbolNames.push(symbols[i].name().trim());
	}

	return symbolNames;
}

var getAllInstances = function(context) {
	var predicate = NSPredicate.predicateWithFormat("className == %@", "MSSymbolInstance"),
		pageLoop = context.document.pages().objectEnumerator(),
		page,
		instanceArray = NSArray.array();

	while (page = pageLoop.nextObject()) {
		var pageInstances = page.children().filteredArrayUsingPredicate(predicate);

		instanceArray = instanceArray.arrayByAddingObjectsFromArray(pageInstances);
	}

	return instanceArray;
}

function createCheckbox(item,flag,frame) {
	var checkbox = NSButton.alloc().initWithFrame(frame),
		flag = (flag == false) ? NSOffState : NSOnState;

	checkbox.setButtonType(NSSwitchButton);
	checkbox.setBezelStyle(0);
	checkbox.setTitle(item.name);
	checkbox.setTag(item.value);
	checkbox.setState(flag);

	return checkbox;
}

function createRadioButtons(options,selected,format,x,y) {
	var rows = options.length,
		columns = 1,
		buttonMatrixWidth = 300,
		buttonCellWidth = buttonMatrixWidth,
		x = (x) ? x : 0,
		y = (y) ? y : 0;

	if (format && format != 0) {
		rows = options.length / 2;
		columns = 2;
		buttonMatrixWidth = 300;
		buttonCellWidth = buttonMatrixWidth / columns;
	}

	var buttonCell = NSButtonCell.alloc().init();

	buttonCell.setButtonType(NSRadioButton);

	var buttonMatrix = NSMatrix.alloc().initWithFrame_mode_prototype_numberOfRows_numberOfColumns(
		NSMakeRect(x,y,buttonMatrixWidth,rows*20),
		NSRadioModeMatrix,
		buttonCell,
		rows,
		columns
	);

	buttonMatrix.setCellSize(NSMakeSize(buttonCellWidth,20));

	for (i = 0; i < options.length; i++) {
		buttonMatrix.cells().objectAtIndex(i).setTitle(options[i]);
		buttonMatrix.cells().objectAtIndex(i).setTag(i);
	}

	buttonMatrix.selectCellAtRow_column(selected,0);

	return buttonMatrix;
}

function createSelect(items,selectedItemIndex,frame) {
	var comboBox = NSComboBox.alloc().initWithFrame(frame),
		selectedItemIndex = (selectedItemIndex > -1) ? selectedItemIndex : 0;

	comboBox.addItemsWithObjectValues(items);
	comboBox.selectItemAtIndex(selectedItemIndex);

	return comboBox;
}
